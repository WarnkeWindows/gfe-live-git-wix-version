import { fetch } from 'wix-fetch';
import { getSecret } from 'wix-secrets-backend';
import wixData from 'wix-data';

// ‚úÖ VERIFIED CONFIGURATION
const BACKEND_URL = 'https://good-faith-exteriors.uc.r.appspot.com';
const WIX_SITE_ID = '5ec64f41-3f5e-4ba1-b9fc-018d3a8681a4';
const APP_ID = '477baa33-872c-4b41-8f1f-7d5e28a684f2';
const APP_SECRET = 'c8b358bd-e1e1-437c-a8f5-a2f0fd6399a1';
const CHAT_AGENT_ID = 'b793626f-7688-4148-b9dc-af612805fff5';

// ‚úÖ Authentication Headers
async function getApiHeaders() {
    try {
        const authToken = await getSecret('auth-token');
        return {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-WIX-SITE-ID': WIX_SITE_ID,
            'X-APP-ID': APP_ID,
            'X-API-Source': 'wix-velo-backend',
            'Authorization': `Bearer ${authToken || 'IST.eyJraWQiOiJQb3pIX2FDMiIsImFsZyI6IlJTMjU2In0.eyJkYXRhIjoie1wiaWRcIjpcIjQ1ZTE2MjUzLWE2MzctNGY2Mi04NDUyLTY4Y2Q1MmIwNzAxNFwiLFwiaWRlbnRpdHlcIjp7XCJ0eXBlXCI6XCJhcHBsaWNhdGlvblwiLFwiaWRcIjpcImE3MTQyZjc3LTI3OTktNDkyNy1iNDQzLWIwYTNkMjU1NzEzZlwifSxcInRlbmFudFwiOntcInR5cGVcIjpcImFjY291bnRcIixcImlkXCI6XCIxMGQ1MmRkOC1lYzliLTQ0NTMtYWRiYy02MjkzYjk5YWY0OTlcIn19IiwiaWF0IjoxNzUwOTgyNjYwfQ.ViSQfl3OxlOxyaFqnZALWrOhJx59_UBNZ7aNQbU_me0mod3iFqkgonympYbduSishV4y7SEyZmdcdEZWVbBMnUbqcZWJbNPpGcoeUlkW0ftdIaYPCVZApPt0ZQVLjF5VgnzecIavGEWSMq5H-_SQCRQxFXieP3O9aH2V8YZZ6FKxvizkaNofnIv9X2LESEfFPIYyQ8jqUk7p4WcZ8Kf6DGRghLxdNVxjRkXpOk9oiq1HqsvVhvzdwfFdwmB3eWA3IRtffsD58GTTtb_q0cdB59oMR4Duv6er_Lr-tLfwl82r1M8age2IMmvW3ursQfPBc2NTi9ZtXzh3iKwIcTJodQ'}`
        };
    } catch (error) {
        console.error('‚ùå Error getting auth headers:', error);
        return {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-WIX-SITE-ID': WIX_SITE_ID,
            'X-APP-ID': APP_ID,
            'X-API-Source': 'wix-velo-backend'
        };
    }
}

// ‚úÖ CORE API FUNCTIONS

// Quote Generation
export async function generateQuote(quoteData) {
    try {
        console.log('üìù Generating quote:', quoteData);
        const headers = await getApiHeaders();
        
        const response = await fetch(`${BACKEND_URL}/api/quote`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                ...quoteData,
                appId: APP_ID,
                siteId: WIX_SITE_ID,
                timestamp: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`Quote generation failed: ${response.status}`);
        }

        const result = await response.json();
        
        // Save to Wix Data
        await wixData.save('GFE_Quotes', {
            ...result,
            status: 'generated',
            createdAt: new Date()
        });
        
        console.log('‚úÖ Quote generated and saved:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå Quote generation failed:', error);
        throw error;
    }
}

// Lead Management
export async function submitLead(leadData) {
    try {
        console.log('üìù Submitting lead:', leadData);
        const headers = await getApiHeaders();
        
        const response = await fetch(`${BACKEND_URL}/api/lead`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                ...leadData,
                source: 'wix-website',
                timestamp: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`Lead submission failed: ${response.status}`);
        }

        const result = await response.json();
        
        // Save to Wix Data
        await wixData.save('GFE_Leads', {
            ...leadData,
            backendId: result.id,
            status: 'submitted',
            createdAt: new Date()
        });
        
        console.log('‚úÖ Lead submitted and saved:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå Lead submission failed:', error);
        throw error;
    }
}

// AI Analysis
export async function analyzeImage(imageData) {
    try {
        console.log('üîç Analyzing image with AI');
        const headers = await getApiHeaders();
        
        const response = await fetch(`${BACKEND_URL}/api/ai-analysis`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                image_data: imageData,
                analysis_type: 'window_assessment',
                timestamp: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`AI analysis failed: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ AI analysis completed:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå AI analysis failed:', error);
        throw error;
    }
}

// Health Check
export async function checkBackendHealth() {
    try {
        const response = await fetch(`${BACKEND_URL}/health`);
        
        if (!response.ok) {
            throw new Error(`Health check failed: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ Backend health check passed:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå Backend health check failed:', error);
        throw error;
    }
}

// Get Backend Configuration
export async function getBackendConfig() {
    try {
        const response = await fetch(`${BACKEND_URL}/api/config`);
        
        if (!response.ok) {
            throw new Error(`Config fetch failed: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ Backend config loaded:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå Backend config failed:', error);
        throw error;
    }
}

// Webhook Handler
export async function handleWebhook(webhookData) {
    try {
        const headers = await getApiHeaders();
        
        const response = await fetch(`${BACKEND_URL}/api/wix/webhook`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(webhookData)
        });

        if (!response.ok) {
            throw new Error(`Webhook failed: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ Webhook processed:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå Webhook processing failed:', error);
        throw error;
    }
}

// =====================================================================
// File: backend/data-validation-service.jsw
// Data Validation and Processing Service
// =====================================================================

export function validateQuoteRequest(quoteData) {
    const errors = [];
    
    // Required fields validation
    if (!quoteData.customerName) {
        errors.push('Customer name is required');
    }
    
    if (!quoteData.email || !isValidEmail(quoteData.email)) {
        errors.push('Valid email address is required');
    }
    
    if (!quoteData.phone) {
        errors.push('Phone number is required');
    }
    
    if (!quoteData.projectType) {
        errors.push('Project type is required');
    }
    
    // Window-specific validation
    if (quoteData.projectType === 'windows') {
        if (!quoteData.windowCount || quoteData.windowCount < 1) {
            errors.push('Number of windows must be at least 1');
        }
        
        if (!quoteData.windowType) {
            errors.push('Window type is required');
        }
    }
    
    return {
        isValid: errors.length === 0,
        errors: errors
    };
}

export function validateLeadData(leadData) {
    const errors = [];
    
    if (!leadData.name || leadData.name.trim().length < 2) {
        errors.push('Name must be at least 2 characters');
    }
    
    if (!leadData.email || !isValidEmail(leadData.email)) {
        errors.push('Valid email address is required');
    }
    
    if (leadData.phone && !isValidPhone(leadData.phone)) {
        errors.push('Valid phone number is required');
    }
    
    return {
        isValid: errors.length === 0,
        errors: errors
    };
}

function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function isValidPhone(phone) {
    const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
    const cleanPhone = phone.replace(/[\s\-\(\)\.]/g, '');
    return phoneRegex.test(cleanPhone);
}

export function sanitizeUserInput(input) {
    if (typeof input !== 'string') return input;
    
    return input
        .trim()
        .replace(/[<>'"]/g, '')
        .substring(0, 1000); // Limit length
}

export function formatPhoneNumber(phone) {
    const cleanPhone = phone.replace(/\D/g, '');
    
    if (cleanPhone.length === 10) {
        return `(${cleanPhone.slice(0,3)}) ${cleanPhone.slice(3,6)}-${cleanPhone.slice(6)}`;
    }
    
    return phone;
}

// =====================================================================
// File: backend/email-service.jsw
// Email Communication Service
// =====================================================================

import { triggeredEmails } from 'wix-crm-backend';

export async function sendQuoteEmail(quoteData) {
    try {
        console.log('üìß Sending quote email:', quoteData);
        
        const emailData = {
            emailId: 'quote-generated',
            toEmail: quoteData.email,
            variables: {
                customerName: quoteData.customerName,
                quoteNumber: quoteData.quoteNumber,
                totalAmount: quoteData.totalAmount,
                projectType: quoteData.projectType,
                companyName: 'Good Faith Exteriors',
                contactEmail: 'nick@goodfaithexteriors.com',
                contactPhone: '(555) 123-4567'
            }
        };
        
        await triggeredEmails.emailContact(emailData);
        
        // Also send to business owners
        await sendBusinessNotification('New Quote Generated', {
            customer: quoteData.customerName,
            email: quoteData.email,
            amount: quoteData.totalAmount,
            type: quoteData.projectType
        });
        
        console.log('‚úÖ Quote email sent successfully');
        return { success: true };
        
    } catch (error) {
        console.error('‚ùå Quote email failed:', error);
        throw error;
    }
}

export async function sendLeadNotification(leadData) {
    try {
        console.log('üìß Sending lead notification:', leadData);
        
        // Send to business owners
        await sendBusinessNotification('New Lead Received', {
            name: leadData.name,
            email: leadData.email,
            phone: leadData.phone,
            message: leadData.message,
            source: leadData.source
        });
        
        // Send confirmation to customer
        const confirmationData = {
            emailId: 'lead-confirmation',
            toEmail: leadData.email,
            variables: {
                customerName: leadData.name,
                companyName: 'Good Faith Exteriors',
                contactEmail: 'nick@goodfaithexteriors.com'
            }
        };
        
        await triggeredEmails.emailContact(confirmationData);
        
        console.log('‚úÖ Lead notification sent successfully');
        return { success: true };
        
    } catch (error) {
        console.error('‚ùå Lead notification failed:', error);
        throw error;
    }
}

async function sendBusinessNotification(subject, data) {
    const businessEmails = [
        'nick@goodfaithexteriors.com',
        'rich@goodfaithexteriors.com'
    ];
    
    for (const email of businessEmails) {
        await triggeredEmails.emailContact({
            emailId: 'business-notification',
            toEmail: email,
            variables: {
                subject: subject,
                data: JSON.stringify(data, null, 2),
                timestamp: new Date().toLocaleString()
            }
        });
    }
}

// =====================================================================
// File: backend/window-estimator-endpoints.jsw
// Window Estimator Specific Endpoints
// =====================================================================

export async function getWindowProducts() {
    try {
        console.log('üîç Fetching window products');
        
        const products = await wixData.query('GFE_WindowProducts')
            .eq('status', 'active')
            .ascending('category')
            .ascending('name')
            .find();
        
        console.log(`‚úÖ Found ${products.items.length} window products`);
        return products.items;
        
    } catch (error) {
        console.error('‚ùå Failed to fetch window products:', error);
        throw error;
    }
}

export async function calculateWindowQuote(windowData) {
    try {
        console.log('üí∞ Calculating window quote:', windowData);
        
        const basePrice = getBasePriceForWindowType(windowData.windowType);
        const sizeMultiplier = calculateSizeMultiplier(windowData.width, windowData.height);
        const quantityDiscount = calculateQuantityDiscount(windowData.quantity);
        const materialUpcharge = calculateMaterialUpcharge(windowData.material);
        
        const subtotal = basePrice * sizeMultiplier * windowData.quantity;
        const materialCost = subtotal * materialUpcharge;
        const discountAmount = subtotal * quantityDiscount;
        const laborCost = calculateLaborCost(windowData);
        
        const total = subtotal + materialCost + laborCost - discountAmount;
        
        const quote = {
            basePrice: basePrice,
            subtotal: subtotal,
            materialCost: materialCost,
            laborCost: laborCost,
            discountAmount: discountAmount,
            total: total,
            breakdown: {
                perWindow: basePrice * sizeMultiplier,
                quantity: windowData.quantity,
                sizeMultiplier: sizeMultiplier,
                quantityDiscount: quantityDiscount,
                materialUpcharge: materialUpcharge
            }
        };
        
        console.log('‚úÖ Window quote calculated:', quote);
        return quote;
        
    } catch (error) {
        console.error('‚ùå Window quote calculation failed:', error);
        throw error;
    }
}

function getBasePriceForWindowType(windowType) {
    const basePrices = {
        'single-hung': 450,
        'double-hung': 525,
        'casement': 600,
        'awning': 575,
        'sliding': 500,
        'picture': 650,
        'bay': 1200,
        'bow': 1400
    };
    
    return basePrices[windowType] || 500;
}

function calculateSizeMultiplier(width, height) {
    const area = (width * height) / 144; // Convert to square feet
    
    if (area <= 6) return 1.0;
    if (area <= 10) return 1.2;
    if (area <= 15) return 1.4;
    if (area <= 20) return 1.6;
    return 1.8;
}

function calculateQuantityDiscount(quantity) {
    if (quantity >= 20) return 0.15; // 15% discount
    if (quantity >= 10) return 0.10; // 10% discount
    if (quantity >= 5) return 0.05;  // 5% discount
    return 0;
}

function calculateMaterialUpcharge(material) {
    const upcharges = {
        'vinyl': 0,
        'wood': 0.3