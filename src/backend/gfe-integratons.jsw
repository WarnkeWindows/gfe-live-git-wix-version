/**
 * Good Faith Exteriors - External Integrations
 * Email, SMS, and third-party service integrations
 */

import { getSecret } from 'wix-secrets-backend';
import { fetch } from 'wix-fetch';
import wixData from 'wix-data';

/**
 * Send quote email to customer
 */
export async function sendQuoteEmail(quoteId, customerEmail) {
  try {
    // Get quote details
    const quote = await wixData.get('Quotes', quoteId);
    if (!quote) {
      throw new Error('Quote not found');
    }
    
    // Get company info
    const companyPhone = await getSecret('company_phone');
    const companyWebsite = await getSecret('company_website');
    
    // Email template
    const emailContent = {
      to: customerEmail,
      subject: `Your Window Replacement Quote - ${quote.quoteId}`,
      html: generateQuoteEmailHTML(quote, { phone: companyPhone, website: companyWebsite })
    };
    
    // Send via backend service
    const headers = {
      'Content-Type': 'application/json',
      'X-API-Key': await getSecret('google-workspace-api')
    };
    
    const response = await fetch('https://gfe-backend-837326026335.us-central1.run.app/api/send-email', {
      method: 'POST',
      headers: headers,
      body: JSON.stringify(emailContent)
    });
    
    if (response.ok) {
      // Update quote status
      quote.status = 'sent';
      quote.sentAt = new Date();
      await wixData.update('Quotes', quote);
      
      return {
        success: true,
        message: 'Quote email sent successfully'
      };
    } else {
      throw new Error('Email service failed');
    }
  } catch (error) {
    console.error('Failed to send quote email:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Generate quote email HTML
 */
function generateQuoteEmailHTML(quote, companyInfo) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Your Window Replacement Quote</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: #1A365D; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .quote-details { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; }
        .product-item { border-bottom: 1px solid #eee; padding: 10px 0; }
        .total { font-size: 1.2em; font-weight: bold; color: #1A365D; }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Good Faith Exteriors</h1>
        <p>Your Window Replacement Quote</p>
      </div>
      
      <div class="content">
        <h2>Quote #${quote.quoteId}</h2>
        <p>Dear ${quote.customerInfo?.name || 'Valued Customer'},</p>
        <p>Thank you for your interest in Good Faith Exteriors. We're pleased to provide you with the following quote for your window replacement project.</p>
        
        <div class="quote-details">
          <h3>Quote Details</h3>
          <p><strong>Quote Date:</strong> ${quote.createdAt.toLocaleDateString()}</p>
          <p><strong>Valid Until:</strong> ${quote.validUntil.toLocaleDateString()}</p>
          <p><strong>Project Type:</strong> Window Replacement</p>
          
          <h4>Selected Products:</h4>
          ${quote.products.map(product => `
            <div class="product-item">
              <p><strong>${product.windowBrand} ${product.windowSeries}</strong></p>
              <p>Material: ${product.materialCombination}</p>
              <p>Quantity: ${product.quantity || 1}</p>
              <p>Price: $${product.calculatedPrice}</p>
            </div>
          `).join('')}
          
          <div class="total">
            <p>Total Amount: $${quote.totalAmount}</p>
            <p><em>*30% markup included</em></p>
          </div>
        </div>
        
        <h3>Next Steps</h3>
        <p>To proceed with your window replacement project:</p>
        <ol>
          <li>Review the quote details above</li>
          <li>Contact us to schedule a free in-home consultation</li>
          <li>We'll finalize measurements and installation details</li>
          <li>Schedule your professional installation</li>
        </ol>
        
        <p>This quote is valid for 30 days. All work is backed by our comprehensive warranty and satisfaction guarantee.</p>
      </div>
      
      <div class="footer">
        <p><strong>Contact Good Faith Exteriors</strong></p>
        <p>Phone: ${companyInfo.phone}</p>
        <p>Website: ${companyInfo.website}</p>
        <p>Thank you for choosing Good Faith Exteriors!</p>
      </div>
    </body>
    </html>
  `;
}

/**
 * Send lead notification to sales team
 */
export async function sendLeadNotification(leadId) {
  try {
    const lead = await wixData.get('Leads', leadId);
    if (!lead) {
      throw new Error('Lead not found');
    }
    
    const notificationEmail = await getSecret('notification_email') || 'leads@goodfaithexteriors.com';
    
    const emailContent = {
      to: notificationEmail,
      subject: `New Lead: ${lead.firstName} ${lead.lastName}`,
      html: `
        <h2>New Lead Received</h2>
        <p><strong>Name:</strong> ${lead.firstName} ${lead.lastName}</p>
        <p><strong>Email:</strong> ${lead.email}</p>
        <p><strong>Phone:</strong> ${lead.phone}</p>
        <p><strong>Project Type:</strong> ${lead.projectType}</p>
        <p><strong>Description:</strong> ${lead.projectDescription}</p>
        <p><strong>Budget:</strong> ${lead.budget}</p>
        <p><strong>Timeline:</strong> ${lead.timeline}</p>
        <p><strong>Source:</strong> ${lead.source}</p>
        <p><strong>Date:</strong> ${lead.dateCreated.toLocaleString()}</p>
        
        <p><a href="https://goodfaithexteriors.com/admin/leads/${leadId}">View Lead Details</a></p>
      `
    };
    
    const headers = {
      'Content-Type': 'application/json',
      'X-API-Key': await getSecret('google-workspace-api')
    };
    
    const response = await fetch('https://gfe-backend-837326026335.us-central1.run.app/api/send-email', {
      method: 'POST',
      headers: headers,
      body: JSON.stringify(emailContent)
    });
    
    return {
      success: response.ok,
      message: response.ok ? 'Lead notification sent' : 'Failed to send notification'
    };
  } catch (error) {
    console.error('Failed to send lead notification:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Sync lead to Google Sheets
 */
export async function syncLeadToSheets(leadId) {
  try {
    const lead = await wixData.get('Leads', leadId);
    if (!lead) {
      throw new Error('Lead not found');
    }
    
    const sheetsUrl = await getSecret('google_spreadsheet_url');
    if (!sheetsUrl) {
      return { success: false, error: 'Google Sheets URL not configured' };
    }
    
    const headers = {
      'Content-Type': 'application/json',
      'X-API-Key': await getSecret('google-workspace-api')
    };
    
    const response = await fetch('https://gfe-backend-837326026335.us-central1.run.app/api/sync-to-sheets', {
      method: 'POST',
      headers: headers,
      body: JSON.stringify({
        sheetUrl: sheetsUrl,
        leadData: lead
      })
    });
    
    return {
      success: response.ok,
      message: response.ok ? 'Lead synced to Google Sheets' : 'Failed to sync to sheets'
    };
  } catch (error) {
    console.error('Failed to sync lead to sheets:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Schedule follow-up reminder
 */
export async function scheduleFollowUp(leadId, followUpDate, notes = '') {
  try {
    const lead = await wixData.get('Leads', leadId);
    if (!lead) {
      throw new Error('Lead not found');
    }
    
    // Update lead with follow-up info
    lead.followUpDate = followUpDate;
    lead.followUpNotes = notes;
    lead.status = 'follow-up-scheduled';
    
    await wixData.update('Leads', lead);
    
    // Create follow-up task (could integrate with calendar API)
    const followUpTask = {
      leadId: leadId,
      customerName: `${lead.firstName} ${lead.lastName}`,
      customerEmail: lead.email,
      customerPhone: lead.phone,
      scheduledDate: followUpDate,
      notes: notes,
      status: 'pending',
      createdAt: new Date()
    };
    
    await wixData.save('FollowUpTasks', followUpTask);
    
    return {
      success: true,
      message: 'Follow-up scheduled successfully',
      taskId: followUpTask._id
    };
  } catch (error) {
    console.error('Failed to schedule follow-up:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Generate PDF quote
 */
export async function generateQuotePDF(quoteId) {
  try {
    const quote = await wixData.get('Quotes', quoteId);
    if (!quote) {
      throw new Error('Quote not found');
    }
    
    const headers = {
      'Content-Type': 'application/json',
      'X-API-Key': await getSecret('google-workspace-api')
    };
    
    const response = await fetch('https://gfe-backend-837326026335.us-central1.run.app/api/generate-pdf', {
      method: 'POST',
      headers: headers,
      body: JSON.stringify({
        quoteData: quote,
        template: 'gfe-quote-template'
      })
    });
    
    if (response.ok) {
      const result = await response.json();
      
      // Update quote with PDF URL
      quote.pdfUrl = result.pdfUrl;
      await wixData.update('Quotes', quote);
      
      return {
        success: true,
        pdfUrl: result.pdfUrl
      };
    } else {
      throw new Error('PDF generation failed');
    }
  } catch (error) {
    console.error('Failed to generate PDF:', error);
    return {
      success: false,
      error: error.message
    };
  }
}