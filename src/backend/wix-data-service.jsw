// Enhanced Wix Data Service with Latest Package Integrations
// Good Faith Exteriors - Backend Services v2.0
// File: backend/data/wix-data-service.jsw

import { createClient } from '@wix/sdk';
import { data } from "@wix/data";
import { crm } from "@wix/crm";
import { bookings } from "@wix/bookings";
import { stores } from "@wix/stores";
import { contacts } from "@wix/contacts";
import { events } from "@wix/events";
import { storage } from "@wix/site-storage";
import { getSecret } from 'wix-secrets-backend';
import _ from 'lodash';
import winston from 'winston';

// Configure logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.simple()
    })
  ]
});

class EnhancedWixDataService {
  constructor() {
    this.client = null;
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
    this.initialized = false;
  }

  async initialize() {
    try {
      // Get Wix API credentials from secrets
      const wixApiKey = await getSecret('GFE-API');
      const wixAccountId = await getSecret('GFE_ID_WIX_API');

      this.client = createClient({
        modules: {
          data,
          crm,
          bookings,
          stores,
          contacts,
          events,
          storage
        },
        auth: {
          apiKey: wixApiKey,
          accountId: wixAccountId
        }
      });

      this.initialized = true;
      logger.info('Enhanced Wix Data Service initialized successfully');
    } catch (error) {
      logger.error('Failed to initialize Wix Data Service:', error);
      throw error;
    }
  }

  // Caching mechanism
  getCacheKey(collection, operation, params = {}) {
    return `${collection}_${operation}_${JSON.stringify(params)}`;
  }

  setCache(key, data) {
    this.cache.set(key, { data, timestamp: Date.now() });
  }

  getCache(key) {
    const cached = this.cache.get(key);
    if (!cached || (Date.now() - cached.timestamp > this.cacheTimeout)) {
      if (cached) this.cache.delete(key);
      return null;
    }
    return cached.data;
  }
  
  clearCache(pattern = null) {
      if (pattern) {
          for (const key of this.cache.keys()) {
              if (key.includes(pattern)) this.cache.delete(key);
          }
      } else {
          this.cache.clear();
      }
  }


  // Window Products Master Catalog Operations
  async getWindowProducts(filters = {}) {
    const cacheKey = this.getCacheKey('WindowProductsMasterCatalog', 'query', filters);
    const cached = this.getCache(cacheKey);
    if (cached) return cached;

    try {
      let query = this.client.data.query('WindowProductsMasterCatalog');
      // Apply filters and sorting...
      const result = await query.find();
      this.setCache(cacheKey, result);
      logger.info(`Retrieved ${result.items.length} window products`);
      return result;
    } catch (error) {
      logger.error('Error fetching window products:', error);
      throw error;
    }
  }

  // CRM Operations
  async createLead(leadData) {
    try {
      const enhancedLeadData = {
        ...leadData,
        createdAt: new Date(),
        updatedAt: new Date(),
        id: `lead_${Date.now()}`
      };
      const result = await this.client.data.insert('CRMLeads', enhancedLeadData);
      this.clearCache('CRMLeads');
      logger.info(`Created new lead: ${result._id}`);
      return result;
    } catch (error) {
      logger.error('Error creating lead:', error);
      throw error;
    }
  }

  // Quote Management Operations
  async createQuote(quoteData) {
    try {
        const quoteNumber = `GFE-${Date.now()}`;
        const enhancedQuoteData = { ...quoteData, quoteNumber, createdAt: new Date(), status: 'draft' };
        const result = await this.client.data.insert('Quotes', enhancedQuoteData);
        this.clearCache('Quotes');
        logger.info(`Created new quote: ${quoteNumber}`);
        return result;
    } catch (error) {
        logger.error('Error creating quote:', error);
        throw error;
    }
  }
  
  // Health check
  async healthCheck() {
    try {
      if (!this.initialized) await this.initialize();
      await this.client.data.query('Configuration').limit(1).find();
      return { status: 'healthy', timestamp: new Date(), cacheSize: this.cache.size };
    } catch (error) {
      logger.error('Health check failed:', error);
      return { status: 'unhealthy', error: error.message };
    }
  }
}

// Export singleton instance
const wixDataService = new EnhancedWixDataService();
export default wixDataService;/*********
 .jsw file
 *********

 Backend .jsw files contain functions that run on the server side but can be called from page code and frontend files.
 Use backend functions to keep code private and hidden from a user's browser. More info:

 https://support.wix.com/en/article/velo-web-modules-calling-backend-code-from-the-frontend

**********/

/*** Call the sample multiply function below by copying the following into your page code:

 import { multiply } from 'backend/multiplication';

 $w.onReady(function () {
     multiply(4, 5).then(product => {
         console.log(product);
     })
     .catch(error => {
         console.log(error);
     });
 });

***/

// Sample backend code in a multiplication.jsw file:

export function multiply(factor1, factor2) {
   return factor1 * factor2;
}