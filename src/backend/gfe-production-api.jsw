/**
 * Good Faith Exteriors Production API
 * Main API service using verified credentials
 */

import { getSecret } from 'wix-secrets-backend';
import { fetch } from 'wix-fetch';
import { wixData } from 'wix-data';

/**
 * Analyze window image using Claude AI
 */
export async function analyzeWindowImage(imageData, options = {}) {
  try {
    const claudeApiKey = await getSecret('claude_api_key');
    
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': claudeApiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4096,
        temperature: 0.1,
        messages: [{
          role: 'user',
          content: [
            {
              type: 'text',
              text: `Analyze this window image for Good Faith Exteriors. Provide detailed measurements, material identification, condition assessment, and replacement recommendations with cost estimates.

Customer Notes: ${options.customerNotes || 'No additional notes'}
Analysis Type: ${options.analysisType || 'comprehensive'}`
            },
            {
              type: 'image',
              source: {
                type: 'base64',
                media_type: 'image/jpeg',
                data: imageData
              }
            }
          ]
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status}`);
    }

    const analysisResult = await response.json();
    
    // Enhance with Google Cloud Vision
    const visionAnalysis = await analyzeWithGoogleVision(imageData);
    
    return {
      success: true,
      claudeAnalysis: analysisResult,
      visionAnalysis: visionAnalysis,
      confidence: 0.85,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('❌ Window image analysis failed:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Google Cloud Vision analysis
 */
async function analyzeWithGoogleVision(imageData) {
  try {
    const apiKey = await getSecret('google-ai-studio-api-key');
    
    const response = await fetch(`https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        requests: [{
          image: { content: imageData },
          features: [
            { type: 'OBJECT_LOCALIZATION', maxResults: 10 },
            { type: 'LABEL_DETECTION', maxResults: 10 },
            { type: 'TEXT_DETECTION', maxResults: 5 }
          ]
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`Vision API error: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('❌ Google Vision analysis failed:', error);
    return null;
  }
}

/**
 * Get window products with 30% markup
 */
export async function getWindowProducts(filters = {}) {
  try {
    const basePriceMultiplier = parseFloat(await getSecret('base_price_multiplier') || '1.30');
    
    let query = wixData.query('WindowProducts');
    
    if (filters.brand) query = query.eq('windowBrand', filters.brand);
    if (filters.material) query = query.eq('interiorMaterial', filters.material);
    if (filters.type) query = query.eq('windowType', filters.type);
    
    query = query.eq('isActive', true);
    
    const results = await query.find();
    
    const productsWithPricing = results.items.map(product => {
      const basePrice = product.basePrice || 0;
      const pricePerUI = product.pricePerUI || 0;
      const baseUI = product.baseUI || 0;
      
      let baseCost = basePrice + (pricePerUI * baseUI);
      const finalPrice = baseCost * basePriceMultiplier;
      
      return {
        ...product,
        calculatedPrice: Math.round(finalPrice * 100) / 100,
        baseCost: Math.round(baseCost * 100) / 100,
        markupPercentage: Math.round((basePriceMultiplier - 1) * 100)
      };
    });
    
    return {
      success: true,
      products: productsWithPricing,
      totalCount: results.totalCount
    };
  } catch (error) {
    console.error('❌ Error fetching products:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Calculate comprehensive quote
 */
export async function calculateQuote(selectedProducts, customerInfo, projectDetails) {
  try {
    let subtotal = 0;
    const quotedProducts = selectedProducts.map(product => {
      const quantity = product.quantity || 1;
      const customUI = product.customUI || product.baseUI;
      
      const basePrice = product.basePrice || 0;
      const pricePerUI = product.pricePerUI || 0;
      let itemCost = basePrice + (pricePerUI * customUI);
      
      // Apply 30% markup
      itemCost *= 1.30;
      
      const totalPrice = itemCost * quantity;
      subtotal += totalPrice;
      
      return {
        ...product,
        customUI: customUI,
        quantity: quantity,
        unitPrice: Math.round(itemCost * 100) / 100,
        totalPrice: Math.round(totalPrice * 100) / 100
      };
    });
    
    const quoteId = `GFE-${Date.now()}`;
    const validUntil = new Date();
    validUntil.setDate(validUntil.getDate() + 30);
    
    const quote = {
      quoteId: quoteId,
      customerInfo: customerInfo,
      projectDetails: projectDetails,
      products: quotedProducts,
      subtotal: Math.round(subtotal * 100) / 100,
      markupPercentage: 30,
      totalPrice: Math.round(subtotal * 100) / 100,
      validUntil: validUntil,
      createdAt: new Date(),
      status: 'draft'
    };
    
    const savedQuote = await wixData.save('Quotes', quote);
    
    return { success: true, quote: savedQuote };
  } catch (error) {
    console.error('❌ Quote calculation failed:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Submit customer data
 */
export async function submitCustomerData(customerData, quoteId = null) {
  try {
    const leadData = {
      ...customerData,
      quoteId: quoteId,
      dateCreated: new Date(),
      status: 'new',
      source: 'ai-assistant',
      leadId: `LEAD-${Date.now()}`
    };
    
    const savedLead = await wixData.save('Leads', leadData);
    
    // Optional CRM integration
    try {
      const crmUrl = await getSecret('crm-app-script-url');
      if (crmUrl) {
        await fetch(crmUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(leadData)
        });
      }
    } catch (crmError) {
      console.warn('CRM integration failed:', crmError);
    }
    
    return { success: true, leadId: savedLead._id, data: savedLead };
  } catch (error) {
    console.error('❌ Lead save failed:', error);
    return { success: false, error: error.message };
  }
}