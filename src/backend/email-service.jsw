import { getSecret } from 'backend/data/secretsManager.js';

// Utility function to log email activities
function logEmailActivity(activity) {
    console.log('Email Activity:', activity);
}

// Function to send an email using a generic email provider
async function sendEmailWithProvider(emailOptions) {
    // Simulate sending email
    console.log('Sending email with options:', emailOptions);
    // Here you would integrate with an actual email service provider
    return { success: true, message: 'Email sent successfully' };
}

// Main function to send customer emails
export async function sendCustomerEmail(emailOptions) {
    try {
        // Validate email options
        if (!emailOptions.to || !emailOptions.from || !emailOptions.subject || !emailOptions.html) {
            throw new Error('Missing required email fields: to, from, subject, or html');
        }

        // Retrieve email provider credentials
        const emailProviderApiKey = await getSecret('email_provider_api_key');
        if (!emailProviderApiKey) {
            throw new Error('Email provider API key not found');
        }

        // Add provider-specific options
        const providerOptions = {
            apiKey: emailProviderApiKey,
            ...emailOptions
        };

        // Send email using the provider
        const result = await sendEmailWithProvider(providerOptions);

        // Log the email activity
        logEmailActivity({
            to: emailOptions.to,
            subject: emailOptions.subject,
            status: result.success ? 'Sent' : 'Failed',
            message: result.message
        });

        return result;
    } catch (error) {
        console.error('Failed to send email:', error);
        return { success: false, message: error.message };
    }
}/*********
 .jsw file
 *********

 Backend .jsw files contain functions that run on the server side but can be called from page code and frontend files.
 Use backend functions to keep code private and hidden from a user's browser. More info:

 https://support.wix.com/en/article/velo-web-modules-calling-backend-code-from-the-frontend

**********/

/*** Call the sample multiply function below by copying the following into your page code:

 import { multiply } from 'backend/multiplication';

 $w.onReady(function () {
     multiply(4, 5).then(product => {
         console.log(product);
     })
     .catch(error => {
         console.log(error);
     });
 });

***/

// Sample backend code in a multiplication.jsw file:

export function multiply(factor1, factor2) {
   return factor1 * factor2;
}