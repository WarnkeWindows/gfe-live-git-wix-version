/**
 * Good Faith Exteriors - CRM Integration Service
 * File: backend/services/gfe-crm-service.jsw
 * Handles all customer and lead management logic, integrating with the core data service.
 */

import {
    createLead as createLeadInDataService,
    updateLead,
    getCustomerByEmail as getCustomerByEmailFromDataService,
    createOrUpdateContact
} from '../core/wix-data-service.jsw';

import { logSystemEvent } from './gfe-analytics-service.jsw';

/**
 * Creates a new customer lead, ensuring contact exists in Wix CRM.
 * @param {object} leadData - The lead information.
 * @returns {Promise<object>}
 */
export async function createNewLead(leadData) {
    try {
        if (!leadData || !leadData.email) {
            throw new Error("Lead data with a customer email is required.");
        }

        // 1. Ensure the contact exists in the main Wix Contacts list
        await createOrUpdateContact(leadData);

        // 2. Create the lead record in the CRMLeads collection
        const leadRecord = await createLeadInDataService(leadData);

        // 3. Log the event
        await logSystemEvent({
            eventType: 'LEAD_CREATED',
            message: `New lead created for ${leadData.email}`,
            details: { leadId: leadRecord._id, source: leadData.source || 'unknown' }
        });

        return { success: true, lead: leadRecord };
    } catch (error) {
        console.error("Error in createNewLead service:", error);
        await logSystemEvent({
            eventType: 'ERROR',
            message: 'Failed to create new lead.',
            details: { error: error.message, leadData }
        });
        return { success: false, error: error.message };
    }
}

/**
 * Retrieves a customer's complete profile, including projects and quotes.
 * @param {string} email - The customer's email address.
 * @returns {Promise<object>}
 */
export async function getCustomerProfile(email) {
    try {
        if (!email) {
            throw new Error("Customer email is required to fetch profile.");
        }

        const customerResult = await getCustomerByEmailFromDataService(email);

        if (!customerResult.success) {
            return { success: false, error: 'Customer not found.' };
        }
        
        // In a full implementation, you would also query for related projects and quotes
        // using the customer ID from customerResult.customer._id

        return { success: true, profile: customerResult.customer };

    } catch (error) {
        console.error("Error in getCustomerProfile service:", error);
        return { success: false, error: error.message };
    }
}

/**
 * Updates the status of an existing lead.
 * @param {string} leadId - The ID of the lead to update.
 * @param {string} status - The new status.
 * @param {string} notes - Additional notes for the update.
 * @returns {Promise<object>}
 */
export async function updateLeadStatus(leadId, status, notes = '') {
    try {
        if (!leadId || !status) {
            throw new Error("Lead ID and new status are required.");
        }
        
        const updateData = {
            status: status,
            notes: notes // This would likely append to existing notes
        };

        const updatedLead = await updateLead(leadId, updateData);

        await logSystemEvent({
            eventType: 'LEAD_STATUS_UPDATED',
            message: `Lead ${leadId} status changed to ${status}`,
            details: { leadId, newStatus: status }
        });

        return { success: true, lead: updatedLead };
    } catch (error) {
        console.error(`Error updating status for lead ${leadId}:`, error);
        return { success: false, error: error.message };
    }
}