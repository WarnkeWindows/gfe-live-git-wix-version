import Anthropic from '@anthropic-ai/sdk';
import { getSecret } from 'wix-secrets-backend';
import { CHAT_LOGS_COLLECTION, ANTHROPIC_API_KEY_SECRET } from 'backend/gfeConfig.jsw';
import wixData from 'wix-data';

/**
 * Receives chat messages from the iframe, relays to Anthropic Claude, and returns the AI reply.
 * @param {Object} request
 * @returns {Promise<Object>} { reply }
 */
export async function post(request) {
  const apiKey = await getSecret(ANTHROPIC_API_KEY_SECRET);
  const anthropic = new Anthropic({ apiKey });
  const userMsg = request.body.message || "Hello!";

  // System prompt for consistent behavior
  const systemPrompt = `
    You are the "Good Faith Home Remodeling AI Advisor" for Good Faith Exteriors. 
    Provide friendly, clear, and expert advice about windows, energy efficiency, products, and estimates. 
    Always invite follow-up or photo upload. Never guess at measurements if an image is missing.
  `;

  const msg = await anthropic.messages.create({
    model: "claude-sonnet-4-20250514",
    max_tokens: 1024,
    temperature: 0.4,
    system: systemPrompt,
    messages: [
      { role: "user", content: [{ type: "text", text: userMsg }] }
    ]
  });

  // Optionally save the interaction
  await wixData.insert(CHAT_LOGS_COLLECTION, {
    userMessage: userMsg,
    aiResponse: msg.content[0]?.text || '',
    timestamp: new Date()
  });

  return { reply: msg.content[0]?.text || "Sorry, I couldn't process your request." };
}
/*********
 .jsw file
 *********

 Backend .jsw files contain functions that run on the server side but can be called from page code and frontend files.
 Use backend functions to keep code private and hidden from a user's browser. More info:

 https://support.wix.com/en/article/velo-web-modules-calling-backend-code-from-the-frontend

**********/

/*** Call the sample multiply function below by copying the following into your page code:

 import { multiply } from 'backend/multiplication';

 $w.onReady(function () {
     multiply(4, 5).then(product => {
         console.log(product);
     })
     .catch(error => {
         console.log(error);
     });
 });

***/

// Sample backend code in a multiplication.jsw file:

export function multiply(factor1, factor2) {
   return factor1 * factor2;
}